#!/usr/bin/lua

local uci = require "uci"
fs  = require "nixio.fs"
iw  = require "iwinfo"

firewall = require "lime.firewall"
network = require "lime.network"
wireless = require "lime.wireless"
system = require "lime.system"

package.path = "proto/?.lua;" .. package.path

x = uci:cursor()

local function split(string, sep)
    local ret = {}
    for token in string.gmatch(string, "[^"..sep.."]+") do table.insert(ret, token) end
    return ret
end

function node_id()
    local dev = assert(x:get("lime", "network", "primary_dev"))
    local mac = assert(fs.readfile("/sys/class/net/"..dev.."/address"))
    local t = split(mac, ":")
    local r1, r2, r3 = tonumber(t[#t-2], 16), tonumber(t[#t-1], 16), tonumber(t[#t], 16)
    return r1, r2, r3
end

function network_id()
    local network_essid = assert(x:get("lime", "wireless", "ssid"))
    local n1, n2, n3
    local fd = io.popen('echo "' .. network_essid .. '" | md5sum')
    if fd then
        local md5 = fd:read("*a")
        n1 = tonumber(md5:match("^(..)"), 16)
        n2 = tonumber(md5:match("^..(..)"), 16)
        n3 = tonumber(md5:match("^....(..)"), 16)
        fd:close()
    end
    return n1, n2, n3
end

function printf(fmt, ...)
    print(string.format(fmt, ...))
end

function main()
    network.configure()
    wireless.configure()
    firewall.configure()
    system.configure()
end

main()
