#!/usr/bin/lua

local config = require("lime.config")
local network = require("lime.network")
local hardware_detection = require("lime.hardware_detection")

local libuci = require("uci")

tl_wdr3600 = {}

tl_wdr3600.sectionNamePrefix = hardware_detection.sectionNamePrefix.."tl_wdr3600_"

function tl_wdr3600.clean()
	if not tl_wdr3600.board_match() then return end

	local function clean_lime_section(s)
		local sectionName = s[".name"]
		if utils.stringStarts(sectionName, tl_wdr3600.sectionNamePrefix) and config.autogenerable(sectionName) then
			config.delete(sectionName)
		end
	end

	config.init_batch()
	config.foreach("wifi", clean_lime_section)
	config.end_batch()
end

function tl_wdr3600.detect_hardware()
	if not tl_wdr3600.board_match() then return end

	local sectionName = ""

	config.init_batch()
	for _, radioName in pairs({"radio0", "radio1"}) do
		sectionName = tl_wdr3600.sectionNamePrefix..radioName
		if config.autogenerable(sectionName) then
			config.set(sectionName, "wifi")
			config.set(sectionName, "autogenerated", "true")
			config.set(sectionName, "radio_name", radioName)

			for option_name, value in pairs(config.get_all("wifi")) do
				if (option_name:sub(1,1) ~= ".") then
					if ( type(value) ~= "table" ) then value = tostring(value) end
					config.set(sectionName, option_name, value)
				end
			end

			if (radioName == "radio0") then
				config.set(sectionName, "modes", {"ap"})
			elseif (radioName == "radio1") then
				config.set(sectionName, "modes", {"ap", "adhoc"})
			end
		end
	end
	config.end_batch()

	local linuxBaseIfname = "eth0"
	sectionName = tl_wdr3600.sectionNamePrefix..linuxBaseIfname
	if config.autogenerable(sectionName) then
		config.init_batch()
		config.set(sectionName, "net")
		config.set(sectionName, "autogenerated", "true")
		config.set(sectionName, "protocols", {"switch"})
		config.set(sectionName, "linux_name", linuxBaseIfname)
		config.end_batch()
	end

	for vlanId=1,2 do
		sectionName = tl_wdr3600.sectionNamePrefix..linuxBaseIfname.."vlan"..vlanId
		if config.autogenerable(sectionName) then
			local linux_name = linuxBaseIfname.."."..vlanId
			local protos = {}

			for _, proto in pairs(config.get("network", "protocols")) do
				if ( vlanId == 1 and proto ~= "wan") or ( vlanId == 2 and proto ~= "lan") then
					table.insert(protos, proto)
				end
			end

			config.init_batch()
			config.set(sectionName, "net")
			config.set(sectionName, "autogenerated", "true")
			config.set(sectionName, "protocols", protos)
			config.set(sectionName, "linux_name", linux_name)
			config.end_batch()
		end
	end
end

function tl_wdr3600.board_match()
	local f = io.open("/proc/cpuinfo", "r")
	local b = f:read("*all")
	f:close()
	return (b:find("TP%-LINK") and ( b:find("TL%-WDR3600") or b:find("TL%-WDR4300") or b:find("TL%-WDR4310")))
end

return tl_wdr3600
