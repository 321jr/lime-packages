<%#
LuCI - Lua Configuration Interface
Copyright 2013 Nicolas Echaniz <nicoechaniz@altermundi.net>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

$Id$

-%>

<%-
  local ntm = require "luci.model.network".init()

  local dev
  local devices = { }
  for _, dev in luci.util.vspairs(luci.sys.net.devices()) do
    if dev:match("^wlan%d") or dev:match("^ath%d") or dev:match("^wl%d") then
      devices[#devices+1] = dev
    end
  end

  local curdev = luci.dispatcher.context.requestpath
        curdev = curdev[#curdev] ~= "stations" and curdev[#curdev] or devices[1]
-%>

<%+header%>

    <script language="javascript" type="text/javascript" src="<%=resource%>/jquery/jquery-1.4.js"></script>
    <script language="javascript" type="text/javascript" src="<%=resource%>/jquery.flot.min.js"></script>
        

<h2><a id="content" name="content"><%:Stations%></a></h2>

<ul class="cbi-tabmenu">
    <% for _, dev in ipairs(devices) do %>
        <li class="cbi-tab<%= dev == curdev and "" or "-disabled" %>"><a href="<%=build_url("admin/openairview/stations", dev)%>"><%=pcdata(dev)%></a></li>
    <% end %>
</ul>

<div id="placeholder" style="width:100%; height:400px;"></div>

<div id="ref"></div>

<script type="text/javascript">

$(function () {
    var options = {
      lines: { show: true },
      points: { show: true },
      series: { shadowSize: 0 },
      xaxis: { show: false, autoscaleMargin: 0.02 },
      yaxis: { minTickSize: 1, autoscaleMargin: 0.02 },
      legend: {
        position: "sw",
        backgroundOpacity: 0
//        container: "#ref"
      }
    };    
    var placeholder = document.getElementById("placeholder");

    graph = $.plot(placeholder, [], options);

    var seriesCollection = {};
    var round = 0;
    var keep_rounds = 20;
    var inactive_threshold = 1000;
    var round_time = 1;

    /* render datasets, start update interval */
    XHR.poll(round_time, '<%=build_url("openairview/json/stations", curdev)%>', null,
      function(x, series) {
        for (i=0;i<series.length;i++) {
          if (seriesCollection[series[i].station_hostname] == undefined) {
            seriesCollection[series[i].station_hostname] = [];
          }
          if (series[i].attributes.inactive < inactive_threshold){
            seriesCollection[series[i].station_hostname].push([round, series[i].attributes.signal])
          }          
        }
        var data = []

        for (key in seriesCollection){
          stationData = seriesCollection[key]
          if (stationData.length>0){
            while (stationData[0][0] < round - keep_rounds){
              stationData.shift();
            }
            data.push({label: key, data: stationData});
          }
        }

        graph.setData(data);
        graph.setupGrid();
        graph.draw();
        round = round + 1;
      }
    );
  });

</script>

<%+footer%>
