#!/usr/bin/env lua
--[[
Copyright 2017 Marcos Gutierrez <gmarcos87@gmail.com>
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-3.0
]]--

require "ubus"
local nixio = require "nixio",require "nixio.fs"
local iwinfo = require("iwinfo")
local json = require 'luci.json'

local function printJson (obj)
    print(json.encode(obj))
end

local function shell(command)
    -- TODO(nicoechaniz): sanitize or evaluate if this is a security risk
    local handle = io.popen(command)
    local result = handle:read("*a")
    handle:close()
    return result
end

local function file_exists(file)
    -- check if the file exists
    local f = io.open(file, "rb")
    if f then f:close() end
    return f ~= nil
end

local function list_from_file(file)
    -- get all lines from a file with one value per line and return a list type table
    -- return an empty table if the file does not exist
    if not file_exists(file) then return {} end
    local list = {}
    for line in io.lines(file) do
        table.insert(list, line)
    end
    return list
end	

local conn = ubus.connect()
if not conn then
    error("Failed to connect to ubus")
end

function get_stations(msg)
	local function lines(str)
		-- split a string into lines separated by line endings
		local t = {}
		local function helper(line) table.insert(t, line) return "" end
		helper((str:gsub("(.-)\r?\n", helper)))
		return t
	end

	local function file_exists(file)
		-- check if the file exists
		local f = io.open(file, "rb")
		if f then f:close() end
		return f ~= nil
	end

	local function dict_from_file(file)
		-- get all lines from a file with two values per line and return a dict type table
		-- return an empty table if the file does not exist
		if not file_exists(file) then return {} end
		dict = {}
		for line in io.lines(file) do
			words = {}
			for w in line:gmatch("%S+") do table.insert(words, w) end
			if #words == 2 and type(words[1]) == "string" and type(words[1]) == "string" then
				dict[string.lower(words[1])] = words[2]
			end
		end
		return dict
	end

	local function network_links(iface)
		local result = {}
		result.stations = {}
		local channel = iwinfo.nl80211.channel(iface)
		local assoclist = iwinfo.nl80211.assoclist(iface)
		local bat_hosts = dict_from_file("/etc/bat-hosts")
		for station_mac, link_data in pairs(assoclist) do
			local wifilink = {
				link_type = "wifi",
				station_mac = station_mac,
				hostname = station_hostname,
				station_hostname = bat_hosts[string.lower(station_mac)] or station_mac,
				attributes = { signal = tostring(link_data.signal),
							channel = channel, inactive= link_data.inactive }
			}
			table.insert(result.stations, wifilink)
		end
		return result
	end

	local net_links = {
		stations = network_links(msg.device).stations
	}

	printJson(net_links)
end

function get_interfaces(msg)
	local dev
	local devices = conn:call("uci", "get", { config="wireless", type="wifi-iface"})
	local result = {}
	local interfaces = {}
    if devices ~= nil then
        for iface,iface_conf in pairs(devices.values) do
            table.insert(interfaces, { name = iface_conf.ifname, mode = iface_conf.mode })
        end
    end
    result.interfaces = interfaces
	printJson(result)
end

local function get_station_signal(msg)
    local iface = msg.iface
    local mac = msg.station_mac
    local result = {}
    local assoclist = iwinfo.nl80211.assoclist(iface)
    result.station = mac
    result.signal = tostring(assoclist[mac].signal)
    result.status = "ok"
    printJson(result)
end

local function get_iface_stations(msg)
    local iface = msg.iface
    local result = {}
    local stations = {}
    local assoclist = iwinfo.nl80211.assoclist(iface)
    local bat_hosts = list_from_file("/etc/bat-hosts")
    for mac, link_data in pairs(assoclist) do
        local hostname = bat_hosts[string.lower(mac)] or mac
        local station_data = {
            hostname = hostname,
            mac = mac,
            signal = tostring(link_data.signal),
            iface = iface,
            rx_packets = link_data.rx_packets,
            tx_packets = link_data.tx_packets,
        }
        table.insert(stations, station_data)
    end
    result.stations = stations
    result.status = "ok"
    printJson(result)
end

local methods = {
	get_stations = { device = 'value' },
	get_interfaces = { no_params = 0 },
	get_station_signal = { iface = 'value', station_mac = 'value' },
	get_iface_stations = { iface = 'value' }
}

if arg[1] == 'list' then
    printJson(methods)
end

if arg[1] == 'call' then
    local msg = io.read()
    msg = json.decode(msg)
    if       arg[2] == 'get_stations'           then get_stations(msg)
    elseif   arg[2] == 'get_interfaces'         then get_interfaces(msg)
    elseif   arg[2] == 'get_station_signal'     then get_station_signal(msg)
    elseif   arg[2] == 'get_iface_stations'     then get_iface_stations(msg)
    else                                        printJson({ error = "Method not found" })
    end
end