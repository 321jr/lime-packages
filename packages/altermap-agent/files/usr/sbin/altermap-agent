#!/usr/bin/lua
--[[

Copyright 2013 Nicolas Echaniz <nicoechaniz@altermundi.net>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

$Id$

]]--

local httpc = require "luci.httpclient"
local json = require "luci.json"
local fs = require "nixio.fs"
local nixio = require "nixio"
local uci = require "uci"
local uci = uci.cursor()
local netm = require "luci.model.network"
local log = nixio.syslog

-- GENERAL FUNCTIONS

local function is_empty(t)
-- evaluate if a table is empty
   return next(t) == nil
end   

local function pt(t, lvl)
-- print a table
   local lvl = lvl or 0
   for k,v in pairs(t) do
      if lvl > 0 then margin = string.rep("  ", lvl) else margin = "" end
      print(margin .. k .. ": ")
      if type(v) == "table" then
         if not is_empty(v) then
            pt(v, lvl+1)
         end
      else
         print(margin .." ".. tostring(v))
      end
   end
end

local function exec(cmd, clean)
-- execute a system command
	local f = io.popen(cmd, 'r')
	local s = f:read('*a')
	f:close()
	if clean then
	   s = string.gsub(s, '^%s+', '')
	   s = string.gsub(s, '%s+$', '')
	   s = string.gsub(s, '[\n\r]+', ' ')
	end
	return s
end

local function lines(str)
-- split a string into lines separated by line endings
	local t = {}
	local function helper(line) table.insert(t, line) return "" end
	helper((str:gsub("(.-)\r?\n", helper)))
	return t
end

local function file_exists(file)
-- check if the file exists
  local f = io.open(file, "rb")
  if f then f:close() end
  return f ~= nil
end

local function lines_from_file(file)
-- get all lines from a file as a table
-- return an empty list/table if the file does not exist
  if not file_exists(file) then return {} end
  lines = {}
  for line in io.lines(file) do 
    lines[#lines + 1] = line
  end
  return lines
end

local function config_to_table (config_file_path)
-- read a config file with one key="value" per line and return as a table
   local lines = lines_from_file(config_file_path)
   local key_values = {}
   for i, line in pairs(lines) do
      local k, v = line:match('(.+)="(.+)"')
      key_values[k] = v
   end
   return key_values
end

-- READ LOCAL DATA

local function read_hostname()
   local hostname
   uci:foreach("system", "system",
               function(s)
                  hostname = uci:get("system", s[".name"], "hostname")
                  return false
               end)
   return hostname
end

-- nodes with more than one device should use the
-- device naming convention: node--devicename
local function read_nodename()
   local hostname = read_hostname()
   local nodename 
   if string.find(hostname, "%-%-") then
      return hostname:match("(%S+)%-%-")
   else
      return hostname
   end
end


local function read_hardware()
   return lines(exec("cat /tmp/sysinfo/model"))[1]
end

local function read_firmware()
   return config_to_table('/etc/openwrt_release')['DISTRIB_DESCRIPTION']
end

local function read_interfaces()
   local ntm = netm.init()
   local wifidevs = ntm:get_wifidevs()
   local interfaces = {}
   for _, dev in ipairs(wifidevs) do
      for _, net in ipairs(dev:get_wifinets()) do
         local name = net.iwdata.ifname
         wiface = {
            name = name,
            radio = net.iwdata.device,
            macaddr = ntm:get_interface(name):mac(),
            mode = net.iwdata.mode,
            medium = "wireless",
            mcast_rate = net.iwdata.mcast_rate,
            network = net.iwdata.network,
            ssid = net.iwdata.ssid,
            encryption = net.iwdata.encryption,
            bssid = net.iwdata.bssid
         }
         table.insert(interfaces, wiface)
      end
   end
   return interfaces
end

--local function network_links(ntm, net)
--end   

local function read_wifilinks()
   local ntm = netm.init()
   local wifidevs = ntm:get_wifidevs()
   local wifilinks = {}
   for _, dev in ipairs(wifidevs) do
      for _, net in ipairs(dev:get_wifinets()) do
--         net_links = network_links(ntm, net)
--         wifilinks[net.iwdata.ifname] = net_links

         local local_mac = ntm:get_interface(net.iwdata.ifname):mac()
         local channel = net:channel()
         local assoclist = net.iwinfo.assoclist
         for station_mac, link_data in pairs(assoclist) do
            local wifilink = {
               type = "wifi",
               attributes = {
                  interface = net.iwdata.ifname,
                  local_mac = local_mac,
                  station_mac = station_mac,
                  signal = link_data.signal,
                  channel = channel
               }
            }
            table.insert(wifilinks, wifilink)
         end


      end
   end
   return wifilinks
end


-- RETRIEVE DATA FROM THE DB

local function retrieve_network_data(network_name)
   local server_url = uci:get("altermap", "agent", "server_url")
   local json_string = json.encode({keys={network_name}})
   local res = httpc.request_to_buffer(
      server_url.."/_design/altermap/_view/networkByName",
      {headers={["Content-Type"]="application/json"}, method="POST", body=json_string})
   return json.decode(res)
end

local function retrieve_node_data(network_id, node_name)
   local server_url = uci:get("altermap", "agent", "server_url")
   local json_string = json.encode({keys={{network_id, node_name}}})
   local res = httpc.request_to_buffer(
      server_url.."/_design/altermap/_view/nodeByNetIdAndName",
      {headers={["Content-Type"]="application/json"}, method="POST", body=json_string})
   return json.decode(res)
end


-- UPDATE OR CREATE DATA

local function update_device(node, hostname)
   local updated_device = {hostname=hostname,
                           hardware=read_hardware(),
                           firmware=read_firmware(),
                           interfaces=read_interfaces()}
   if(node.devices ~= nil and # node.devices > 0) then
      for i, device in pairs(node.devices) do
         if device.hostname == hostname then
            node.devices[i] = updated_device
         end
      end
   else
      node.devices = {updated_device}
   end
   return node
end

local function push_node_data(node)
   local json_string = json.encode(node)
   local node_url = uci:get("altermap", "agent", "server_url") .. "/" .. node._id
   local res = httpc.request_to_buffer(
      node_url, {headers={["Content-Type"]="application/json"}, method="PUT", body=json_string})
   return json_string
end


-- MAIN

local function main()
-- retrieve current data and if the node exists in the database,
-- update it with this device information
   
   debug = nixio.getenv("ALTERMAP_DEBUG")
   nixio.openlog("altermap-agent")

   local network_name = uci:get("altermap", "agent", "network")
   local network = retrieve_network_data(network_name)
   if not network then
      log("err", "Network not found or database unreachable")
      return
   end   
   local network_id = network.rows[1].id

   local node_name = read_nodename()
   local node_data = retrieve_node_data(network_id, node_name)
   
   if # node_data.rows > 0 then
      log("info", "Updating node...")
      local node = node_data.rows[1].value
      node = update_device(node, hostname)
      node.links = read_wifilinks()
      local node_json = push_node_data(node)
      log("info", "Node updated")
      if debug=="1" then
         print("Node Data")
         pt(node)
         print("json as pushed to database: ".. node_json)
      end

   else
      log("warning", "Node not found: ".. node_name)
   end

   nixio.closelog()

end


main()
