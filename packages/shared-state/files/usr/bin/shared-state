#!/usr/bin/lua

--! LibreMesh
--! Copyright (C) 2019  Gioacchino Mazzurco <gio@altermundi.net>
--!
--! This program is free software: you can redistribute it and/or modify
--! it under the terms of the GNU Affero General Public License as
--! published by the Free Software Foundation, either version 3 of the
--! License, or (at your option) any later version.
--!
--! This program is distributed in the hope that it will be useful,
--! but WITHOUT ANY WARRANTY; without even the implied warranty of
--! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--! GNU Affero General Public License for more details.
--!
--! You should have received a copy of the GNU Affero General Public License
--! along with this program.  If not, see <http://www.gnu.org/licenses/>.

local fs = require("nixio.fs")
local http = require("luci.httpclient")
local JSON = require("luci.jsonc")
local nixio = require("nixio")
require("nixio.util")
local uci = require("uci")

sharedState = {}

--! Map<Key, {ctl, author, data}>
--!   ctl is the count of how much sates changes should occur before the entry
--!   expires
sharedState.storage = {}

sharedState.storageFD = nil
sharedState.changed = false
sharedState.dataType = "unspecified"
sharedState.dataDir = "/var/shared-state/data/"
sharedState.hooksDir = "/etc/shared-state/hooks/"

function sharedState.dataStorePath()
	return sharedState.dataDir..sharedState.dataType..".json"
end

local log = nixio.syslog

function sharedState.insert(key, data, ctl)
	ctl = ctl or 60
	sharedState.storage[key] = {
		ctl=ctl,
		author=io.input("/proc/sys/kernel/hostname"):read("*line"),
		data=data
	}
	sharedState.changed = true
end

function sharedState.merge(stateSlice, notifyInsert)
	local stateSlice = stateSlice or {}
	if(notifyInsert == nil) then notifyInsert = true end

	for key, rv in pairs(stateSlice) do
		if(rv.ctl <= 0 ) then
			log( "debug", "sharedState.merge got expired entry: "..key..
			     " expired on: "..os.date("%c", rv.timeout) )
			sharedState.changed = true
		else
			local lv = sharedState.storage[key]
			if( lv == nil ) then
				sharedState.storage[key] = rv
				sharedState.changed = sharedState.changed or notifyInsert
			elseif ( lv.ctl < rv.ctl ) then
				log( "debug", "Updating entry for: "..key.." older: "..
				     lv.ctl.." newer: "..rv.ctl )
				sharedState.storage[key] = rv
				sharedState.changed = sharedState.changed or notifyInsert
			end
		end
	end
end

function sharedState.remove(key)
	if(sharedState.storage[key] ~= nil and sharedState.storage[key].data ~= nil)
	then sharedState.insert(key, nil) end
end

function sharedState.sync(urls)
	urls = urls or {}

	if #urls < 1 then
		local uci_cursor = uci:cursor()
		local fixed_candidates = uci_cursor:get("shared-state", "options","candidates") or {}
		for _, line in pairs(fixed_candidates) do
			table.insert(
				urls,
				line.."/"..sharedState.dataType )
		end

		io.input(io.popen(arg[0].."-get_candidates_neigh"))
		for line in io.lines() do
			table.insert(
				urls,
				"http://["..line.."]/cgi-bin/shared-state/"..sharedState.dataType )
		end
	end

	for _,url in ipairs(urls) do
		local options = {}
		options.sndtimeo = 3
		options.rcvtimeo = 3
		options.method = 'POST'
		options.body = sharedState.toJsonString()

		-- Alias WK:2622 Workaround https://github.com/openwrt/luci/issues/2622
		local startTP = os.time() -- WK:2622
		local success, response = pcall(http.request_to_buffer, url, options)
		local endTP = os.time() -- WK:2622

		if success and type(response) == "string" and response:len() > 1  then
			local parsedJson = JSON.parse(response)
			if parsedJson then sharedState.merge(parsedJson) end
		else
			log( "debug", "httpclient interal error requesting "..url )

			-- WK:2622
			for tFpath in fs.glob("/tmp/lua_*") do
				local mStat = fs.stat(tFpath)
				if mStat and
						mStat.atime >= startTP and mStat.atime <= endTP and
						mStat.ctime >= startTP and mStat.ctime <= endTP and
						mStat.mtime >= startTP and mStat.mtime <= endTP then
					os.remove(tFpath)
				end
			end
		end
	end
end

function sharedState.toJsonString()
	return JSON.stringify(sharedState.storage)
end

sharedState.locked = false

function sharedState.lock()
	fs.mkdirr(fs.dirname(sharedState.dataStorePath()))
	sharedState.storageFD = nixio.open(
		sharedState.dataStorePath(),
		nixio.open_flags("rdwr", "creat") )

	for i=1,10 do
		if not sharedState.storageFD:lock("tlock") then
			nixio.nanosleep(1)
		else
			sharedState.locked = true
			break
		end
	end

	if not sharedState.locked then
		print(arg[0], arg[1], arg[2], "Failed acquiring lock on data!")
		os.exit(-165)
	end
end

function sharedState.unlock()
	sharedState.storageFD:lock("ulock")
	sharedState.storageFD:close()
	sharedState.storageFD = nil
end

nixio.openlog("shared-state")

if arg[2] then sharedState.dataType = arg[2] end

sharedState.lock()
sharedState.merge(JSON.parse(sharedState.storageFD:readall()), false)
sharedState.unlock()

if arg[1] == "insert" then
	local inputString = (io.stdin:read("*all"))
	local inputTable = JSON.parse(inputString) or {}
	for key, lv in pairs(inputTable) do sharedState.insert(key, lv) end
elseif arg[1] == "get" then
	print(sharedState.toJsonString())
elseif arg[1] == "sync" then
	local urls = {}
	if arg[3] ~= nil then for i=3,#arg do table.insert(urls, arg[i]) end end
	sharedState.sync(urls)
elseif arg[1] == "reqsync" then
	local inputString = (io.stdin:read("*all"))
	sharedState.merge(JSON.parse(inputString))
	print(sharedState.toJsonString())
elseif arg[1] == "remove" then
	local inputTable = JSON.parse(io.stdin:read("*all"))
	if inputTable ~= nil then
		for _,key in ipairs(inputTable) do sharedState.remove(key) end
	end
else
	print(arg[0].." is not able to self manage, needs a command")
	return -22
end

local jsonString = sharedState.toJsonString()

sharedState.lock()
if sharedState.changed then
	sharedState.merge(JSON.parse(sharedState.storageFD:readall()), false)
	for _,v in pairs(sharedState.storage) do v.ctl = v.ctl-1 end
	local outFd = io.open(sharedState.dataStorePath(), "w")
	outFd:write(jsonString)
	outFd:close()
	outFd = nil
end
sharedState.unlock()

if sharedState.changed then
	for hook in fs.dir(sharedState.hooksDir..sharedState.dataType) do
		local hookPath = sharedState.hooksDir..sharedState.dataType.."/"..hook
		local cStdin = io.popen(hookPath, "w")
		cStdin:write(jsonString)
		cStdin:close()
	end
end

nixio.closelog()
