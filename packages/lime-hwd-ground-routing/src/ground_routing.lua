#!/usr/bin/lua

local libuci = require("uci")
local hardware_detection = require("lime.hardware_detection")
local config = require("lime.config")
local utils = require("lime.utils")

local ground_routing = {}

ground_routing.sectionNamePrefix = hardware_detection.sectionNamePrefix.."ground_routing_"

function ground_routing.clean()
	function cleanGrSection(section)
		local sectionName = section[".name"]
		local isGr = utils.stringStarts(sectionName, ground_routing.sectionNamePrefix)
		local autogenerated = config.autogenerable(sectionName)

		if ( isGr and autogenerated ) then config.delete(section[".name"]) end
	end

	config.foreach("net", cleanGrSection)

	local uci = libuci:cursor()
	uci:foreach("network", "switch_vlan", cleanGrSection)
end

function ground_routing.detect_hardware()
	function parse_gr(section)
		local vlan = section["vlan"]
		local switchName = section["switch"]

		if switchName then
			local secname = ground_routing.sectionNamePrefix.."network_"..section[".name"].."_"..switchName.."_"..vlan
			local ports = ""
			for _,p in pairs(section["switch_ports"]) do ports = ports..p.."t " end

			local uci = libuci:cursor()
			uci:set("network", secname, "switch_vlan")
			uci:set("network", secname, "device", switchName)
			uci:set("network", secname, "vlan", vlan)
			uci:set("network", secname, "ports", ports)
			uci:save("network")
		end

		local basedev = section["basedev"]
		if basedev then
			local secname = ground_routing.sectionNamePrefix.."network_"..section[".name"].."_"..basedev.."_"..vlan

			local uci = libuci:cursor()
			uci:set("network", secname, "device")
			uci:set("network", secname, "type", "8021q")
			uci:set("network", secname, "name", basedev.."."..vlan)
			uci:set("network", secname, "vid", vlan)
			uci:save("network")
		end
	end

	config.foreach("hwd_gr", parse_gr)
end

return ground_routing
